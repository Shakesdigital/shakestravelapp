name: Deploy ShakesTravel to Cloudflare

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Deploy Frontend to Cloudflare Pages
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.NEXT_PUBLIC_API_URL_PROD || secrets.NEXT_PUBLIC_API_URL_STAGING }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ github.ref == 'refs/heads/main' && secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY_PROD || secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY_STAGING }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}
      
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: shakestravel-frontend
          directory: frontend/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

  # Job 2: Deploy Workers API
  deploy-workers:
    name: Deploy Workers API
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'workers/package-lock.json'
      
      - name: Install Workers dependencies
        working-directory: workers
        run: npm ci
      
      - name: Install Wrangler
        run: npm install -g wrangler
      
      - name: Deploy to staging
        if: github.ref == 'refs/heads/staging'
        working-directory: workers
        run: wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        working-directory: workers
        run: wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # Job 3: Database Migration (only on main branch)
  migrate-database:
    name: Migrate Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-workers]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Wrangler
        run: npm install -g wrangler
      
      - name: Run database migrations
        working-directory: workers
        run: wrangler d1 execute shakestravel-production --file=../database/schema.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # Job 4: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run frontend tests
        working-directory: frontend
        run: npm test --if-present
      
      - name: Install workers dependencies
        working-directory: workers
        run: npm ci
      
      - name: Run workers tests
        working-directory: workers
        run: npm test --if-present

  # Job 5: Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'